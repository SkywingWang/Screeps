1. Welcome to Screeps!
This tutorial will help you learn basic game concepts step by step. You can take it later, but we strongly advise you to do it now, before you start a real game.
Screeps is a game for programmers. If you don't know how to code in JavaScript, check out this free interactive course.

欢迎来到Screeps！
本教程将帮助您逐步学习基本的游戏概念。 您可以稍后再使用，但强烈建议您在开始制作真实游戏之前立即进行操作。
爬行游戏是程序员的游戏。 如果您不知道如何使用JavaScript编码，请查看此免费的交互式课程。

2. Remember that if you accidentally close a hint window in the tutorial, you can always open it again with this button.
请记住，如果您不小心关闭了教程中的提示窗口，则始终可以使用此按钮再次将其打开。

3. Let's begin. This is a playing field called a "room". In the real game, rooms are connected to each other with exits, but in the simulation mode only one room is available to you.
The object in the center of the screen is your first spawn, your colony center.
Documentation:
Game world

让我们开始。 这是一个称为“房间”的运动场。 在实际游戏中，房间之间通过出口相互连接，但是在模拟模式下，只有一个房间可供您使用。
屏幕中心的对象是您的第一个生成对象，即殖民地中心。
说明文件：
游戏世界

4. You play by writing code in the panel in the bottom of the screen.
Click the "Console" tab.

您可以通过在屏幕底部的面板中编写代码来进行播放。
单击“控制台”选项卡。

5. You can enter your code in this field. It will run once.
Type anything in this field and press Enter.

您可以在此字段中输入代码。 它将运行一次。
在此字段中键入任何内容，然后按Enter。

6. Your command returns a response (or execution error) in the console below. All output is duplicated into your browser console (Ctrl+Shift+J) where you can expand objects for debugging purposes. You can open and close the bottom panel by pressing Alt+Enter.
Now we'll write something real.

您的命令在下面的控制台中返回响应（或执行错误）。 所有输出都复制到浏览器控制台（Ctrl + Shift + J）中，您可以在其中扩展对象以进行调试。 您可以通过按Alt + Enter打开和关闭底部面板。
现在，我们将写一些真实的东西。

7. Your spawn creates new units called "creeps" by its method spawnCreep. Usage of this method is described in the documentation. Each creep has a name and certain body parts that give it various skills.
You can address your spawn by its name the following way: Game.spawns['Spawn1'].
Create a worker creep with the body array [WORK,CARRY,MOVE] and name Harvester1 (the name is important for the tutorial!). You can type the code in the console yourself or copy & paste the hint below.
Documentation:
Your colony
Creeps
Game object
StructureSpawn.spawnCreep

您的Spawn会使用spawnCreep方法创建称为“爬行”的新单位。 文档中介绍了此方法的用法。 每个小兵都有一个名字和某些身体部位，这些技巧赋予它各种技能。
您可以通过以下方式通过名称来命名您的生成：Game.spawns ['Spawn1']。
创建一个带有主体数组[WORK，CARRY，MOVE]并名称为Harvester1的辅助爬虫（该名称对本教程很重要！）。 您可以自己在控制台中输入代码，也可以复制并粘贴以下提示。
说明文件：
你的殖民地
蠕变
游戏对象

8. Great! You now have a creep with the name "Harvester1" that you can control.
棒！ 现在，您可以控制名称为“ Harvester1”的小兵。

9. You can see all the characteristics of your creep (or other objects) by utilizing the "View" action.
通过使用“查看”操作，可以查看蠕变（或其他对象）的所有特征。

10. Hide the editor panel with Alt+Enter and select your creep with the help of the "View" action.
使用Alt + Enter隐藏编辑器面板，然后在“查看”操作的帮助下选择蠕变。

11. Here you can see the characteristics of the object you are now looking at. Values of each characteristic and functions of body parts are described in the documentation.
在这里，您可以看到正在查看的对象的特征。 文档中描述了身体各个部位的特征和功能的值。

12. It is time to put the creep to work! This yellow square is an energy source — a valuable game resource. It can be harvested by creeps with one or more WORK body parts and transported to the spawn by creeps with CARRY parts.
现在是时候开始工作了！ 这个黄色正方形是能源-一种宝贵的游戏资源。 它可以通过一个或多个WORK身体部位的小兵来收获，并通过带有CARRY零件的小兵来运送到产卵场。

13. To give your creep a permanently working command, the console is not enough, since we want the creep to work all the time. So we'll be using the Script tab rather than the console.
要给您的蠕变永久性工作的命令，控制台是不够的，因为我们希望蠕变一直工作。 因此，我们将使用“脚本”选项卡而不是控制台。

14. Here you can write scripts that will run on a permanent basis, each game tick in a loop. It allows writing constantly working programs to control behaviour of your creeps which will work even while you are offline (in the real game only, not the Simulation Room mode).
To commit a script to the game so it can run, use this button or Ctrl+Enter.
The code for each Tutorial section is created in its own branch. You can view code from these branches for further use in your scripts.
Documentation:
Scripting basics

在这里，您可以编写将永久运行的脚本，每个游戏都会循环播放。 它允许编写持续工作的程序来控制您的小兵的行为，即使您处于脱机状态也可以使用（仅在真实游戏中，而不是在“模拟室”模式下）。
要将脚本提交到游戏中以便可以运行，请使用此按钮或Ctrl + Enter。
每个“教程”部分的代码都在其自己的分支中创建。 您可以从这些分支查看代码，以在脚本中进一步使用。
说明文件：
脚本基础

15. A bubbling yellow spot inside the creep means that it has started collecting energy from the source.

蠕变内部起泡的黄色斑点表示它已开始从源头收集能量。

16. To make the creep transfer energy back to the spawn, you need to use the method Creep.transfer. However, remember that it should be done when the creep is next to the spawn, so the creep needs to walk back.
If you modify the code by adding the check .store.getFreeCapacity() > 0 to the creep, it will be able to go back and forth on its own, giving energy to the spawn and returning to the source.
Extend the creep program so that it can transfer harvested energy to the spawn and return back to work.
Documentation:
Creep.transfer
Creep.store

为了使蠕变将能量传递回生成，您需要使用Creep.transfer方法。 但是，请记住，应在蠕虫位于生成物旁边时执行此操作，因此蠕虫需要向后走。
如果您通过在蠕变上添加.store.getFreeCapacity（）> 0来修改代码，它将能够自行来回移动，为生成增加能量并返回源。
扩展蠕变程序，以便它可以将采集的能量转移到生成中并返回工作。
说明文件：
Creep.transfer
Creep.store

17. Great! This creep will now work as a harvester until it dies. Remember that almost any creep has a life cycle of 1500 game ticks, then it "ages" and dies (this behavior is disabled in the Tutorial).
Let's create another worker creep to help the first one. It will cost another 200 energy units, so you may need to wait until your harvester collects enough energy. The spawnCreep method will return an error code ERR_NOT_ENOUGH_ENERGY (-6) until then.
Remember: to execute code once just type it in the "Console" tab.
Spawn a second creep with the body [WORK,CARRY,MOVE] and name Harvester2.
Documentation:
StructureSpawn.spawnCreep

棒！ 现在，该蠕变将一直充当收割机，直到死亡。 请记住，几乎所有的小兵都具有1500个游戏滴答的生命周期，然后它“老化”并死亡（此行为在本教程中已禁用）。
让我们创建另一个工作人员来帮助第一个工作人员。 这将花费另外200个能量单位，因此您可能需要等到收割机收集到足够的能量。 在此之前，spawnCreep方法将返回错误代码ERR_NOT_ENOUGH_ENERGY（-6）。
记住：要执行一次代码，只需在“控制台”选项卡中键入即可。
使用身体[WORK，CARRY，MOVE]进行第二次爬行，并命名为Harvester2。
说明文件：
StructureSpawn.spawnCreep

18. The second creep is ready, but it won't move until we include it into the program.
To set the behavior of both creeps we could just duplicate the entire script for the second one, but it's much better to use the for loop against all the screeps in Game.creeps.
Expand your program to both the creeps.
Documentation:
JavaScript Reference: for...in loops

第二步已经准备就绪，但是直到我们将其包含到程序中之后它才会移动。
要设置这两个小兵的行为，我们可以只复制第二个小兵的整个脚本，但是最好对Game.creeps中的所有小兵使用for循环。
将您的程序扩展到两个方面。
说明文件：
JavaScript参考：for ... in循环

19. Now let's improve our code by taking the workers' behavior out into a separate module. Create a module called role.harvester with the help of the Modules section on the left of the script editor and define a run function inside the module.exports object, containing the creep behavior.
Create a role.harvester module.
Documentation:
Organizing scripts using modules

现在，通过将工人的行为纳入一个单独的模块来改进代码。 借助脚本编辑器左侧的“模块”部分，创建一个名为role.harvester的模块，并在module.exports对象内定义一个包含蠕变行为的运行函数。
创建一个role.harvester模块。
说明文件：
使用模块组织脚本

20. Now you can rewrite the main module code, leaving only the loop and a call to your new module by the method require('role.harvester').
Include the role.harvester module in the main module.

现在，您可以重写主模块代码，仅保留循环，并通过require（'role.harvester'）方法调用新模块。
在主模块中包括role.harvester模块。

21. It's much better now!
By adding new roles and modules to your creeps this way, you can control and manage the work of many creeps. In the next Tutorial section, we’ll develop a new creep role.

现在好多了！
通过以这种方式向爬虫添加新的角色和模块，您可以控制和管理许多爬虫的工作。 在下一节教程中，我们将开发一个新的爬行角色。