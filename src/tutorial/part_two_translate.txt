1. In this Tutorial section we’ll talk about a key strategic object in your room: Room Controller. By controlling this invincible structure you can build facilities in the room. The higher the controller level, the more structures available to build.
在本教程部分中，我们将讨论您房间中的关键战略对象：房间管理员。 通过控制这种无敌的结构，您可以在房间中建造设施。 控制器级别越高，可构建的结构越多。

2. You will need a new worker creep to upgrade your controller level. Let's call it "Upgrader1". In following sections we'll discuss how to create creeps automatically, but for now let's send a command manually to the console.
Spawn a creep with the body [WORK,CARRY,MOVE] and the name Upgrader1.
Documentation:
Control
Game.spawns
StructureSpawn.spawnCreep

您将需要新的工作人员来升级您的控制器级别。 我们称之为“ Upgradeer1”。 在以下各节中，我们将讨论如何自动创建蠕变，但现在让我们将命令手动发送到控制台。
使用身体[WORK，CARRY，MOVE]和名称Upgrader1产生一个小兵。
说明文件：
控制
Game.spawns
StructureSpawn.spawnCreep

3. Creep "Upgrader1" went to perform the same task as the harvester, but we don't want it to. We need to differentiate creep roles.
蠕变“ Upgrader1”去执行与收割机相同的任务，但我们不希望这样做。 我们需要区分蠕变角色。

4. To do that, we need to utilize the memory property of each creep that allows writing custom information into the creep's "memory". Let's do this to assign different roles to our creeps.
All your stored memory is accessible via the global Memory object. You can use it any way you like.
Write a property role='harvester' into the memory of the harvester creep and role='upgrader' — to the upgrader creep with the help of the console.
Documentation:
Memory object
Creep.memory

为此，我们需要利用每个蠕变的记忆属性，该属性允许将自定义信息写入蠕变的“内存”。 让我们这样做可以为小兵分配不同的角色。
可以通过全局Memory对象访问所有存储的内存。 您可以随意使用它。
在控制台的帮助下，将属性role ='harvester'写入收割机小兵的内存中，并将role ='upgradeer'—写入升级器小兵。
说明文件：
记忆体
蠕变记忆

5. You can check your creeps' memory in either the creep information panel on the left or on the "Memory" tab.
Now let's define the behavior of the new creep. Both creeps should harvest energy, but the creep with the role harvester should bring it to the spawn, while the creep with the role upgrader should go to the Controller and apply the function upgradeController to it (you can get the Controller object with the help of the Creep.room.controller property).
In order to do this, we’ll create a new module called role.upgrader.
Create a new module role.upgrader with the behavior logic of your new creep.
Documentation:
RoomObject.room
Room.controller
Creep.upgradeController

您可以在左侧的“蠕变信息”面板或“内存”选项卡上检查蠕变的内存。
现在让我们定义新蠕变的行为。 两种蠕变都应该收集能量，但是使用角色收集器的蠕变应该将其带到生成中，而使用角色升级器的蠕变应该去到Controller并对其应用upgradeController函数（您可以在 Creep.room.controller属性）。
为此，我们将创建一个名为role.upgrader的新模块。
使用新的蠕变的行为逻辑创建一个新的模块role.upgrader。
说明文件：
RoomObject.room
房间控制器
Creep.upgradeController

6. In our main module, all creeps run the same role. We need to divide their behavior depending on the previously defined property Creep.memory.role by connecting the new module.
Apply the logic from the module role.upgrader to the creep with the role upgrader and check how it performed.
在我们的主模块中，所有小兵都扮演着相同的角色。 我们需要通过连接新模块来根据先前定义的属性Creep.memory.role划分其行为。
使用角色升级程序将来自模块role.upgrader的逻辑应用于蠕变，并检查其性能。

7.Perfect, you have upgraded your Controller level!
Important: If you don’t upgrade your Controller within 20,000 game ticks, it loses one level. On reaching level 0, you will lose control over the room, and another player will be able to capture it freely. Make sure that at least one of your creeps regularly performs the function upgradeController.

完美，您已经升级了Controller级别！
重要提示：如果您没有在20,000个游戏周期内升级控制器，它将失去一个等级。 达到0级时，您将失去对房间的控制权，另一个玩家将可以自由捕获它。 确保至少有一个蠕变定期执行功能upgradeController。